# Standard Linux kernel recipe that builds the kernel, modules and device
# trees. By default the defconfig of the architecture is built. Set the
# LINUX_CONFIG environment variable to use another ${LINUX_CONFIG}_defconfig.
# To use a custom defconfig create a package kernel::linux-custom-config and
# set LINUX_CUSTOM_CONFIG to the name of your custom defconfig file.

inherit: [make]

depends:
    - if: "${LINUX_CUSTOM_CONFIG:-}"
      name: kernel::linux-custom-config

metaEnvironment:
    PKG_VERSION: "5.7.4"

checkoutSCM:
    scm: url
    url: https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${PKG_VERSION}.tar.xz
    digestSHA1: "3b84ef2105b55549f1d0329f2522741581eea326"
    stripComponents: 1

buildTools: [bison, flex, host-toolchain]
buildVars: [ARCH, LINUX_CONFIG, LINUX_CUSTOM_CONFIG]
buildScript: |
    # prevent timestamps in configuration
    export KCONFIG_NOTIMESTAMP=1
    export KBUILD_BUILD_TIMESTAMP='Mon Dec 28 22:49:40 CET 2015'

    # Compute the arch path, since i386 and x86_64 are in arch/x86 and not
    # in arch/$(KERNEL_ARCH). Even if the kernel creates symbolic links
    # for bzImage, arch/i386 and arch/x86_64 do not exist when copying the
    # defconfig file.
    case "$ARCH" in
        i386|x86_64)
            LINUX_ARCH_PATH=arch/x86
            ;;
        sh|sh64)
            LINUX_ARCH_PATH=arch/sh
            ;;
        sparc32|sparc64)
            LINUX_ARCH_PATH=arch/sparc
            ;;
        *)
            LINUX_ARCH_PATH=arch/${ARCH}
            ;;
    esac
    echo "$LINUX_ARCH_PATH" > .arch-path

    # Use plain "defconfig" if we have no specific target. Otherwise check if
    # defconfig has changed.
    if [[ ${LINUX_CUSTOM_CONFIG:+true} ]] ; then
        cp -u "${BOB_DEP_PATHS[kernel::linux-custom-config]}/$LINUX_CUSTOM_CONFIG" .config
        make -C "$1" O=$PWD olddefconfig
    elif [[ ${LINUX_CONFIG:+true} ]] ; then
        if [[ ( ! -e ".config" ) || ( "$1/${LINUX_ARCH_PATH}/configs/${LINUX_CONFIG}_defconfig" -nt ".config" ) ]] ; then
            make -C "$1" O=$PWD "${LINUX_CONFIG}_defconfig"
        fi
    else
        if [[ ! -e ".config" ]] ; then
            make -C "$1" O=$PWD defconfig
        fi
    fi

multiPackage:
    "":
        inherit: [pkg-config]
        depends:
            - tools:
                target-toolchain: host-toolchain
              depends:
                - libs::elfutils-libelf-dev
                - libs::openssl-dev
                - name: kernel::kmod
                  use: [tools]

        buildTools: [target-toolchain]
        buildVars: [CROSS_COMPILE]
        buildScript: |
            makeParallel

        multiPackage:
            image:
                packageScript: |
                    read LINUX_ARCH_PATH < $1/.arch-path
                    mkdir -p boot

                    case "$ARCH" in
                        arm)            KBUILD_IMAGE=zImage ;;
                        arm64)          KBUILD_IMAGE=Image.gz ;;
                        riscv)          KBUILD_IMAGE=Image.gz ;;
                        i386|x86_64)    KBUILD_IMAGE=bzImage ;;
                        *)              KBUILD_IMAGE="*Image" ;;
                    esac
                    cp -a "$1/$LINUX_ARCH_PATH/boot/"${KBUILD_IMAGE} boot/
                    if [[ -d "$1/$LINUX_ARCH_PATH/boot/dts" ]] ; then
                        cp -a "$1/$LINUX_ARCH_PATH/boot/dts/"*.dtb boot/
                    fi

            modules:
                packageTools: [kmod]
                packageVars: [PKG_VERSION]
                packageScript: |
                    make -C "$1" INSTALL_MOD_PATH="$PWD" modules_install
                    rm lib/modules/"${PKG_VERSION}"/{build,source}
                    depmod -b "$PWD" "$PKG_VERSION"

    # This package is only for other recipes that need special kernel headers
    # that are not available in the generic toolchain. Depending on this
    # package should only be needed if you have a custom kernel with
    # added/modified driver headers. It will make your package dependent on
    # this kernel and it's particular configuration!
    headers:
        buildScript: |
            make headers_install
        packageScript: |
            cp -a $1/usr .

provideVars:
    LINUX_VERSION: "$PKG_VERSION"
