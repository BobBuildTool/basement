shared: True

depends:
    - name: devel::gcc-cross
      if: "${GCC_LIBC}"
    - name: devel::gcc-cross-bare
      if: "$(not,${GCC_LIBC})"

buildVars: [AUTOCONF_TARGET, GCC_LIBC]
buildScript: |
    rm -rf *
    cp -an $2/* .
    mkdir -p usr/sysroots/$AUTOCONF_TARGET/usr/lib
    if [[ ${GCC_LIBC:+true} ]] ; then
       cp -an ${BOB_DEP_PATHS[libs::${GCC_LIBC}-dev]}/* usr/sysroots/$AUTOCONF_TARGET
       rsync -aHSK usr/$AUTOCONF_TARGET/lib/ \
         usr/sysroots/$AUTOCONF_TARGET/usr/lib/ \
         --include '*.so.*' \
         --exclude '*'
    fi

packageScript: |
    cp -a $1/* .

provideTools:
    target-toolchain:
        path: "usr/bin"
        environment:
            # usual compiler variables
            AR: "${AUTOCONF_TARGET}-ar"
            AS: "${AUTOCONF_TARGET}-as"
            CC: "${AUTOCONF_TARGET}-gcc"
            CPP: "${AUTOCONF_TARGET}-cpp"
            CXX: "${AUTOCONF_TARGET}-g++"
            GDB: "${AUTOCONF_TARGET}-gdb"
            LD: "${AUTOCONF_TARGET}-ld"
            NM: "${AUTOCONF_TARGET}-nm"
            OBJCOPY: "${AUTOCONF_TARGET}-objcopy"
            OBJDUMP: "${AUTOCONF_TARGET}-objdump"
            RANLIB: "${AUTOCONF_TARGET}-ranlib"
            STRIP: "${AUTOCONF_TARGET}-strip"

            # Host system definition. Note that we do not touch the build
            # system definiton (AUTOCONF_BUILD) because this is a cross
            # compiling toolchain.
            ARCH: "${ARCH}"
            AUTOCONF_HOST: "${AUTOCONF_TARGET}"
            CROSS_COMPILE: "${AUTOCONF_TARGET}-"
            TOOLCHAIN_SYSROOT: "../sysroots/${AUTOCONF_TARGET}"

            # compiler flags
            CPPFLAGS:   "-Wdate-time"
            CFLAGS:     "-O${BASEMENT_OPTIMIZE}$(if-then-else,${BASEMENT_DEBUG}, -g,) -pipe"
            CXXFLAGS:   "-O${BASEMENT_OPTIMIZE}$(if-then-else,${BASEMENT_DEBUG}, -g,) -pipe"
            LDFLAGS:    "-Wl,-O1 -Wl,--hash-style=gnu"

multiPackage:
    # Keep an unconfigured package that can be tweaked by the consumer. This is
    # available for special use cases.
    "": {}

    # x86_64 "cross" compiling toolchain. Ships its own glibc.
    x86_64-linux-gnu:
        environment:
            AUTOCONF_TARGET: "x86_64-cross-linux-gnu"
            ARCH: "x86_64"
            GCC_LIBC: "glibc"
            GCC_MULTILIB: "m32,m64"

    # ARMv7 Linux CortexA toolchain with hard floating point
    arm-linux-gnueabihf:
        environment:
            AUTOCONF_TARGET: "arm-linux-gnueabihf"
            ARCH: "arm"
            GCC_TARGET_ARCH: "armv7-a"
            GCC_TARGET_FLOAT_ABI: "hard"
            GCC_TARGET_FPU: "vfpv4"
            GCC_LIBC: "glibc"

    # ARMv7 bare metal toolchain with newlib libc
    arm-none-eabi:
        environment:
            AUTOCONF_TARGET: "arm-none-eabi"
            ARCH: "arm"
            GCC_ENABLE_LANGUAGES: "c"
            GCC_LIBC: "newlib"

    # ARMv8-A AArch64 Linux toolchain
    aarch64-linux-gnu:
        environment:
            AUTOCONF_TARGET: "aarch64-cross-linux-gnu"
            ARCH: "arm64"
            GCC_TARGET_ARCH: "armv8-a"
            GCC_LIBC: "glibc"
