shared: True

depends:
    # If AUTOCONF_BUILD == AUTOCONF_HOST then this is regular cross toolchain
    # that is executable on the build machine. Note that it will be built with
    # the host-native-toolchain!
    - name: devel::gcc-cross-host
      if: !expr |
        "$AUTOCONF_BUILD" == get-tool-env("target-toolchain", "AUTOCONF_HOST", "$AUTOCONF_BUILD")

    # If AUTOCONF_BUILD != AUTOCONF_HOST, we build a canadian cross.
    - name: devel::gcc-cross-canadian
      if: !expr |
        "$AUTOCONF_BUILD" != get-tool-env("target-toolchain", "AUTOCONF_HOST", "$AUTOCONF_BUILD")

buildVars: [AUTOCONF_TARGET, GCC_LIBC]
buildScript: |
    rm -rf *
    cp -an $2/* .
    cp -an ${BOB_DEP_PATHS[devel::binutils]}/* .
    mkdir -p usr/sysroots/$AUTOCONF_TARGET/usr/lib
    if [[ ${GCC_LIBC:+true} ]] ; then
       cp -an ${BOB_DEP_PATHS[libs::${GCC_LIBC}]}/* usr/sysroots/$AUTOCONF_TARGET
       rsync -aHSK usr/$AUTOCONF_TARGET/lib/ \
         usr/sysroots/$AUTOCONF_TARGET/usr/lib/ \
         --include '*.so.*' \
         --exclude '*'
    fi

packageScript: |
    cp -a $1/* .
    # Remove debug symbols of host executables. We don't care if the toolchain
    # crashes. The target architecture symbols need to be retained, though...
    find usr/bin usr/libexec -type d -name .debug | xargs /bin/rm -rf

provideTools:
    target-toolchain:
        path: "usr/bin"
        environment:
            # usual compiler variables
            AR: "${AUTOCONF_TARGET}-ar"
            AS: "${AUTOCONF_TARGET}-as"
            CC: "${AUTOCONF_TARGET}-gcc"
            CPP: "${AUTOCONF_TARGET}-cpp"
            CXX: "${AUTOCONF_TARGET}-g++"
            LD: "${AUTOCONF_TARGET}-ld"
            NM: "${AUTOCONF_TARGET}-nm"
            OBJCOPY: "${AUTOCONF_TARGET}-objcopy"
            OBJDUMP: "${AUTOCONF_TARGET}-objdump"
            RANLIB: "${AUTOCONF_TARGET}-ranlib"
            READELF: "${AUTOCONF_TARGET}-readelf"
            STRIP: "${AUTOCONF_TARGET}-strip"

            # Host system definition. Note that we do not touch the build
            # system definition (AUTOCONF_BUILD) because this is a cross
            # compiling toolchain.
            ARCH: "${ARCH}"
            AUTOCONF_HOST: "${AUTOCONF_TARGET}"
            CROSS_COMPILE: "${AUTOCONF_TARGET}-"
            TOOLCHAIN_SYSROOT: "../sysroots/${AUTOCONF_TARGET}"

            # Target CPU feature flags. The "toolchain-feature" function
            # implicitly reads ARCH, CROSS_TOOLCHAIN_CPU, GCC_TARGET_ARCH and
            # CROSS_TOOLCHAIN_ARCH...

            # x86 toolchains take MMX, SSE and SSE2 for granted...
            CPU_HAS_SSE3:
                value: "$(toolchain-feature,sse3)"
                if: "$(eq,$ARCH,x86_64)"
            CPU_HAS_SSSE3:
                value: "$(toolchain-feature,ssse3)"
                if: "$(eq,$ARCH,x86_64)"
            CPU_HAS_SSE41:
                value: "$(toolchain-feature,sse4.1)"
                if: "$(eq,$ARCH,x86_64)"
            CPU_HAS_SSE42:
                value: "$(toolchain-feature,sse4.2)"
                if: "$(eq,$ARCH,x86_64)"
            CPU_HAS_AVX:
                value: "$(toolchain-feature,avx)"
                if: "$(eq,$ARCH,x86_64)"
            CPU_HAS_AVX2:
                value: "$(toolchain-feature,avx2)"
                if: "$(eq,$ARCH,x86_64)"
            CPU_HAS_AVX512:
                value: "$(toolchain-feature,avx512)"
                if: "$(eq,$ARCH,x86_64)"

            CPU_HAS_VFPV2:
                value: "$(toolchain-feature,vfpv2)"
                if: "$(eq,$ARCH,arm)"
            CPU_HAS_VFPV3:
                value: "$(toolchain-feature,vfpv3)"
                if: "$(eq,$ARCH,arm)"
            CPU_HAS_VFPV4:
                value: "$(toolchain-feature,vfpv4)"
                if: "$(eq,$ARCH,arm)"
            CPU_HAS_NEON:
                value: "$(toolchain-feature,neon)"
                if: "$(eq,$ARCH,arm)"

            CPU_HAS_SVE:
                value: "$(toolchain-feature,SVE)"
                if: "$(eq,$ARCH,arm64)"
            CPU_HAS_SVE2:
                value: "$(toolchain-feature,SVE2)"
                if: "$(eq,$ARCH,arm64)"
            CPU_HAS_SME:
                value: "$(toolchain-feature,SME)"
                if: "$(eq,$ARCH,arm64)"

provideVars:
    # Set default compiler flags
    CPPFLAGS: "-Wdate-time"
    CFLAGS: &cflags >-
        -O${BASEMENT_OPTIMIZE}$(if-then-else,${BASEMENT_DEBUG}, -g,) -pipe
        ${CROSS_TOOLCHAIN_CPU+ -mcpu=$CROSS_TOOLCHAIN_CPU}
        ${CROSS_TOOLCHAIN_ARCH+ -march=$CROSS_TOOLCHAIN_ARCH}
    CXXFLAGS: *cflags
    LDFLAGS: "-Wl,-O1"

multiPackage:
    # Keep an unconfigured package that can be tweaked by the consumer. This is
    # available for special use cases.
    "": {}

    x86_64-l4re:
        environment:
            AUTOCONF_TARGET: "x86_64-l4re"
            ARCH: "x86_64"
            GCC_LIBC: "uclibc-l4re"

    # x86_64 "cross" compiling toolchain. Ships its own glibc.
    x86_64-linux-gnu:
        environment:
            AUTOCONF_TARGET: "x86_64-cross-linux-gnu"
            ARCH: "x86_64"
            GCC_LIBC: "glibc"
            GCC_MULTILIB: "m32,m64"

    x86_64-linux-gnu-ada:
        environment:
            AUTOCONF_TARGET: "x86_64-cross-linux-gnu"
            ARCH: "x86_64"
            GCC_LIBC: "glibc"
            GCC_ENABLE_LANGUAGES: "c,c++,ada"

    # ARMv7 Linux CortexA toolchain with hard floating point
    arm-linux-gnueabihf:
        environment:
            AUTOCONF_TARGET: "arm-linux-gnueabihf"
            ARCH: "arm"
            GCC_TARGET_ARCH: "armv7-a+fp"
            GCC_TARGET_FLOAT_ABI: "hard"
            GCC_LIBC: "glibc"

    # ARMv7 bare metal toolchain with newlib libc
    arm-none-eabi:
        environment:
            AUTOCONF_TARGET: "arm-none-eabi"
            ARCH: "arm"
            GCC_ENABLE_LANGUAGES: "c"
            GCC_LIBC: "newlib"

    aarch64-l4re:
        environment:
            AUTOCONF_TARGET: "aarch64-l4re"
            ARCH: "arm64"
            GCC_LIBC: "uclibc-l4re"
            GCC_TARGET_ARCH: "armv8-a"

    # ARMv8-A AArch64 Linux toolchain
    aarch64-linux-gnu:
        environment:
            AUTOCONF_TARGET: "aarch64-linux-gnu"
            ARCH: "arm64"
            GCC_TARGET_ARCH: "armv8-a"
            GCC_LIBC: "glibc"

    # ARMv8-A AArch64 Linux toolchain with ada
    aarch64-linux-gnu-ada:
        environment:
            AUTOCONF_TARGET: "aarch64-linux-gnu"
            ARCH: "arm64"
            GCC_TARGET_ARCH: "armv8-a"
            GCC_LIBC: "glibc"
            GCC_ENABLE_LANGUAGES: "c,c++,ada"

    # ARMv8-A/R AArch64 bare metal toolchain
    aarch64-none-elf:
        environment:
            AUTOCONF_TARGET: "aarch64-none-elf"
            ARCH: "arm64"
            GCC_TARGET_ARCH: "armv8-a"
            GCC_LIBC: "newlib"

    # RISC-V 64 bit, standard, general-purpose ISA
    riscv64-linux-gnu:
        environment:
            AUTOCONF_TARGET: "riscv64-linux-gnu"
            ARCH: "riscv"
            GCC_TARGET_ARCH: "rv64gc"
            GCC_TARGET_ABI: "lp64d"
            GCC_LIBC: "glibc"
