From 10325d65d1422c53b6eebf842cb5aedd91194c06 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Kl=C3=B6tzke?= <jan.kloetzke@kernkonzept.com>
Date: Mon, 12 May 2025 17:01:30 +0200
Subject: [PATCH 5/5] Add L4Re support

So far for Arm, AArch64, i386 and x86_64.
---
 gcc/config.gcc                 | 31 ++++++++++++++-
 gcc/config.host                |  5 ++-
 gcc/config/l4re.h              | 69 ++++++++++++++++++++++++++++++++++
 gcc/config/l4re.opt            | 32 ++++++++++++++++
 gcc/configure.ac               |  2 +-
 libgcc/config.host             | 29 ++++++++++++++
 libgcc/config/arm/unwind-arm.h |  2 +-
 libstdc++-v3/configure.host    |  3 ++
 libstdc++-v3/crossconfig.m4    |  9 +++++
 9 files changed, 176 insertions(+), 6 deletions(-)
 create mode 100644 gcc/config/l4re.h
 create mode 100644 gcc/config/l4re.opt

diff --git a/gcc/config.gcc b/gcc/config.gcc
index ae332a88768..49c4b96f986 100644
--- a/gcc/config.gcc
+++ b/gcc/config.gcc
@@ -843,6 +843,21 @@ case ${target} in
 *-*-fuchsia*)
   native_system_header_dir=/include
   ;;
+*-*-l4re*)
+  extra_options="$extra_options l4re.opt"
+  gas=yes
+  gnu_ld=yes
+  default_use_cxa_atexit=yes
+  tmake_file="t-slibgcc"
+  case ${enable_threads} in
+    "" | yes | posix) thread_file='posix' ;;
+    no) ;;
+    *)
+      echo 'Unknown thread configuration for L4Re'
+      exit 1
+      ;;
+  esac
+  ;;
 *-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-gnu* | *-*-kopensolaris*-gnu | *-*-uclinuxfdpiceabi)
   extra_options="$extra_options gnu-user.opt"
   gas=yes
@@ -1126,7 +1141,7 @@ case ${target} in
 esac
 
 case ${target} in
-aarch64*-*-elf | aarch64*-*-fuchsia* | aarch64*-*-rtems*)
+aarch64*-*-elf | aarch64*-*-fuchsia* | aarch64*-*-rtems* | aarch64*-*-l4re*)
 	tm_file="${tm_file} elfos.h newlib-stdint.h"
 	tm_file="${tm_file} aarch64/aarch64-elf.h aarch64/aarch64-errata.h aarch64/aarch64-elf-raw.h"
 	tmake_file="${tmake_file} aarch64/t-aarch64"
@@ -1137,6 +1152,9 @@ aarch64*-*-elf | aarch64*-*-fuchsia* | aarch64*-*-rtems*)
         aarch64-*-fuchsia*)
                 tm_file="${tm_file} fuchsia.h"
                 ;;
+        aarch64-*-l4re*)
+                tm_file="${tm_file} l4re.h"
+                ;;
 	aarch64-*-rtems*)
 		tm_file="${tm_file} aarch64/rtems.h rtems.h"
 		tmake_file="${tmake_file} aarch64/t-aarch64-rtems"
@@ -1399,7 +1417,7 @@ arm*-*-phoenix*)
 	tmake_file="${tmake_file} arm/t-arm arm/t-bpabi arm/t-phoenix"
 	target_cpu_cname="arm7tdmi"
 	;;
-arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia*)
+arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia* | arm*-*-l4re*)
 	case ${target} in
 	arm*eb-*-eabi*)
 	  tm_defines="${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1"
@@ -1419,6 +1437,11 @@ arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia*)
 	  tmake_file="${tmake_file} arm/t-bpabi arm/t-fuchsia"
 	  target_cpu_cname="generic-armv7-a"
 	  ;;
+	arm*-*-l4re*)
+	  tm_file="${tm_file} l4re.h glibc-stdint.h"
+	  tmake_file="${tmake_file} arm/t-bpabi"
+	  target_cpu_cname="generic-armv7-a"
+	  ;;
 	arm*-*-rtems*)
 	  tm_file="${tm_file} arm/rtems.h rtems.h newlib-stdint.h"
 	  tmake_file="${tmake_file} arm/t-bpabi arm/t-rtems"
@@ -2219,6 +2242,10 @@ x86_64-*-fuchsia*)
 	tmake_file="${tmake_file} i386/t-x86_64-elf"
 	tm_file="${tm_file} i386/unix.h i386/att.h elfos.h newlib-stdint.h i386/i386elf.h i386/x86-64.h fuchsia.h"
 	;;
+x86_64-*-l4re*)
+	tmake_file="${tmake_file} i386/t-x86_64-elf"
+	tm_file="${tm_file} i386/unix.h i386/att.h elfos.h newlib-stdint.h i386/i386elf.h i386/x86-64.h l4re.h"
+	;;
 ia64*-*-elf*)
 	tm_file="${tm_file} elfos.h newlib-stdint.h ia64/sysv4.h ia64/elf.h"
 	tmake_file="ia64/t-ia64"
diff --git a/gcc/config.host b/gcc/config.host
index 21a988e6376..2ee81a0b9a4 100644
--- a/gcc/config.host
+++ b/gcc/config.host
@@ -100,7 +100,7 @@ esac
 
 case ${host} in
   aarch64*-*-freebsd* | aarch64*-*-linux* | aarch64*-*-fuchsia* |\
-  aarch64*-*-darwin*)
+  aarch64*-*-darwin* | aarch64*-*-l4re*)
     case ${target} in
       aarch64*-*-*)
 	host_extra_gcc_objs="driver-aarch64.o"
@@ -108,7 +108,8 @@ case ${host} in
 	;;
     esac
     ;;
-  arm*-*-freebsd* | arm*-*-netbsd* | arm*-*-linux* | arm*-*-fuchsia*)
+  arm*-*-freebsd* | arm*-*-netbsd* | arm*-*-linux* | arm*-*-fuchsia* |\
+  arm*-*-l4re*)
     case ${target} in
       arm*-*-*)
 	host_extra_gcc_objs="driver-arm.o"
diff --git a/gcc/config/l4re.h b/gcc/config/l4re.h
new file mode 100644
index 00000000000..e1dc638a9be
--- /dev/null
+++ b/gcc/config/l4re.h
@@ -0,0 +1,69 @@
+/* The GNU C++ standard library requires that these macros be defined.  */
+#undef CPLUSPLUS_CPP_SPEC
+#define CPLUSPLUS_CPP_SPEC "-D_GNU_SOURCE %(cpp)"
+
+#undef  STARTFILE_SPEC
+#define STARTFILE_SPEC \
+  "%{shared:; \
+     static:crt1.o%s; \
+     static-pie:crt1.p.o%s; \
+     " PIE_SPEC ":crt1.s.o%s; \
+     :crt1.o%s} " \
+   "%{shared:crti.s.o%s;:crti.o%s} " \
+   "%{static:crtbeginT.o%s; \
+     shared|static-pie|" PIE_SPEC ":crtbeginS.o%s; \
+     :crtbegin.o%s} "
+
+#undef  ENDFILE_SPEC
+#define ENDFILE_SPEC \
+   "%{static:crtend.o%s; \
+     shared|static-pie|" PIE_SPEC ":crtendS.o%s; \
+     :crtend.o%s} " \
+   "%{shared:crtn.s.o%s;:crtn.o%s} "
+
+#undef  LIB_SPEC
+#define LIB_SPEC "-lc"
+
+#if defined(HAVE_LD_EH_FRAME_HDR)
+#define LINK_EH_SPEC "%{!static|static-pie:--eh-frame-hdr} "
+#endif
+
+#undef  LINK_SPEC
+#define LINK_SPEC \
+  "%{static:-Bstatic} "                                     \
+  "%{shared:-shared} "                                      \
+  "%{symbolic:-Bsymbolic} "                                 \
+  "%{!static:%{!static-pie:                                 \
+    %{rdynamic:-export-dynamic}                             \
+    %{!shared:-dynamic-linker=rom/libld-l4.so.1}}} "        \
+  "%{static-pie:-Bstatic -pie --no-dynamic-linker -z text}"
+
+#define GNU_USER_TARGET_LINK_GCC_C_SEQUENCE_SPEC \
+  "%{static|static-pie:--start-group} %G %{!nolibc:%L} \
+   %{static|static-pie:--end-group}%{!static:%{!static-pie:%G}}"
+
+#undef LINK_GCC_C_SEQUENCE_SPEC
+#define LINK_GCC_C_SEQUENCE_SPEC GNU_USER_TARGET_LINK_GCC_C_SEQUENCE_SPEC
+
+/* Use --as-needed -lgcc_s for eh support.  */
+#ifdef HAVE_LD_AS_NEEDED
+#define USE_LD_AS_NEEDED 1
+#endif
+
+#ifndef TARGET_SUB_OS_CPP_BUILTINS
+#define TARGET_SUB_OS_CPP_BUILTINS()
+#endif
+
+#undef  TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()		\
+  do						\
+    {						\
+      builtin_define ("__l4re__");		\
+      TARGET_SUB_OS_CPP_BUILTINS();		\
+    }						\
+  while (false)
+
+#define NATIVE_SYSTEM_HEADER_DIR_ARCH NATIVE_SYSTEM_HEADER_DIR "/l4-arch"
+
+/* Add .note.GNU-stack special section */
+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack
diff --git a/gcc/config/l4re.opt b/gcc/config/l4re.opt
new file mode 100644
index 00000000000..efbbeea4e58
--- /dev/null
+++ b/gcc/config/l4re.opt
@@ -0,0 +1,32 @@
+; Options for systems using l4re.h.
+
+; Copyright (C) 2011-2021 Free Software Foundation, Inc.
+;
+; This file is part of GCC.
+;
+; GCC is free software; you can redistribute it and/or modify it under
+; the terms of the GNU General Public License as published by the Free
+; Software Foundation; either version 3, or (at your option) any later
+; version.
+;
+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY
+; WARRANTY; without even the implied warranty of MERCHANTABILITY or
+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+; for more details.
+;
+; You should have received a copy of the GNU General Public License
+; along with GCC; see the file COPYING3.  If not see
+; <http://www.gnu.org/licenses/>.
+
+; See the GCC internals manual (options.texi) for a description of
+; this file's format.
+
+; Please try to keep this file in ASCII collating order.
+
+pthread
+Ignore
+
+rdynamic
+Driver
+
+; This comment is to ensure we retain the blank line above.
diff --git a/gcc/configure.ac b/gcc/configure.ac
index 4fd323483d2..22d3f617408 100644
--- a/gcc/configure.ac
+++ b/gcc/configure.ac
@@ -6863,7 +6863,7 @@ AC_CACHE_CHECK(__stack_chk_fail in target C library,
 	 # realistically usable GNU/Hurd configurations.
 	 # All supported versions of musl provide it as well
 	 gcc_cv_libc_provides_ssp=yes;;
-       *-*-darwin* | *-*-freebsd* | *-*-netbsd*)
+       *-*-darwin* | *-*-freebsd* | *-*-netbsd* | *-*-l4re*)
 	 AC_CHECK_FUNC(__stack_chk_fail,[gcc_cv_libc_provides_ssp=yes],
            [echo "no __stack_chk_fail on this target"])
         ;;
diff --git a/libgcc/config.host b/libgcc/config.host
index 8621de4f638..b776aa5e50b 100644
--- a/libgcc/config.host
+++ b/libgcc/config.host
@@ -281,6 +281,10 @@ case ${host} in
   tmake_file="$tmake_file t-crtstuff-pic t-libgcc-pic t-eh-dw2-dip t-slibgcc t-slibgcc-fuchsia"
   extra_parts="crtbegin.o crtend.o"
   ;;
+*-*-l4re*)
+  tmake_file="$tmake_file t-crtstuff-pic t-libgcc-pic t-eh-dw2-dip t-slibgcc t-slibgcc-gld-nover"
+  extra_parts="crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o"
+  ;;
 *-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-gnu* | *-*-kopensolaris*-gnu | *-*-uclinuxfdpiceabi)
   tmake_file="$tmake_file t-crtstuff-pic t-libgcc-pic t-eh-dw2-dip t-slibgcc t-slibgcc-gld t-slibgcc-elf-ver t-linux"
   extra_parts="crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o"
@@ -416,6 +420,13 @@ aarch64*-*-fuchsia*)
 	tmake_file="${tmake_file} ${cpu_type}/t-softfp t-softfp"
 	tmake_file="${tmake_file} t-dfprules"
 	;;
+aarch64*-*-l4re*)
+	extra_parts="$extra_parts crtfastmath.o"
+	tmake_file="${tmake_file} ${cpu_type}/t-aarch64"
+	tmake_file="${tmake_file} ${cpu_type}/t-lse t-slibgcc-libgcc"
+	tmake_file="${tmake_file} ${cpu_type}/t-softfp t-softfp"
+	md_unwind_header=aarch64/aarch64-unwind.h
+	;;
 aarch64*-*-linux*)
 	extra_parts="$extra_parts crtfastmath.o"
 	md_unwind_header=aarch64/linux-unwind.h
@@ -492,6 +503,12 @@ arm*-*-fuchsia*)
 	tm_file="${tm_file} arm/bpabi-lib.h"
 	unwind_header=config/arm/unwind-arm.h
 	;;
+arm*-*-l4re*)
+	tmake_file="${tmake_file} arm/t-arm arm/t-elf arm/t-bpabi"
+	tmake_file="${tmake_file} arm/tsoftfp t-softfp"
+	tm_file="${tm_file} arm/bpabi-lib.h"
+	unwind_header=config/arm/unwind-arm.h
+	;;
 arm*-*-netbsdelf*)
 	tmake_file="$tmake_file arm/t-arm"
 	case ${host} in
@@ -715,6 +732,12 @@ x86_64-*-elf* | x86_64-*-rtems*)
 x86_64-*-fuchsia*)
 	tmake_file="$tmake_file t-libgcc-pic"
 	;;
+x86_64-*-l4re*)
+	tmake_file="$tmake_file t-libgcc-pic"
+	extra_parts="$extra_parts crtprec32.o crtprec64.o crtprec80.o"
+	tmake_file="${tmake_file} i386/t-crtpc i386/t-crtstuff t-dfprules"
+	tm_file="${tm_file} i386/elf-lib.h"
+	;;
 i[34567]86-*-dragonfly*)
 	tmake_file="${tmake_file} i386/t-dragonfly i386/t-crtstuff"
 	md_unwind_header=i386/dragonfly-unwind.h
@@ -747,6 +770,12 @@ i[34567]86-*-linux*)
 	tm_file="${tm_file} i386/elf-lib.h"
 	md_unwind_header=i386/linux-unwind.h
 	;;
+i[34567]86-*-l4re*)
+	extra_parts="$extra_parts crtprec32.o crtprec64.o crtprec80.o"
+	tmake_file="${tmake_file} i386/t-crtpc i386/t-crtstuff t-dfprules"
+	tm_file="${tm_file} i386/elf-lib.h"
+	md_unwind_header=i386/linux-unwind.h
+	;;
 i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-kopensolaris*-gnu)
 	extra_parts="$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o"
 	tmake_file="${tmake_file} i386/t-crtpc t-crtfm i386/t-crtstuff t-dfprules"
diff --git a/libgcc/config/arm/unwind-arm.h b/libgcc/config/arm/unwind-arm.h
index b5b27fb85c4..f8c74c8a0e8 100644
--- a/libgcc/config/arm/unwind-arm.h
+++ b/libgcc/config/arm/unwind-arm.h
@@ -74,7 +74,7 @@ static inline _Unwind_Ptr _Unwind_gnu_Find_got (_Unwind_Ptr ptr)
       tmp += _Unwind_gnu_Find_got (ptr);
       tmp = *(_Unwind_Word *) tmp;
 #elif (defined(linux) && !defined(__uClinux__)) || defined(__NetBSD__) \
-    || defined(__FreeBSD__) || defined(__fuchsia__)
+    || defined(__FreeBSD__) || defined(__fuchsia__) || defined(__l4re__)
       /* Pc-relative indirect.  */
 #define _GLIBCXX_OVERRIDE_TTYPE_ENCODING (DW_EH_PE_pcrel | DW_EH_PE_indirect)
       tmp += ptr;
diff --git a/libstdc++-v3/configure.host b/libstdc++-v3/configure.host
index 9e7c7f02dfd..d78b5ce6436 100644
--- a/libstdc++-v3/configure.host
+++ b/libstdc++-v3/configure.host
@@ -255,6 +255,9 @@ case "${host_os}" in
   freebsd*)
     os_include_dir="os/bsd/freebsd"
     ;;
+  l4re*)
+    os_include_dir="os/uclibc"
+    ;;
   linux-musl*)
     os_include_dir="os/generic"
     ;;
diff --git a/libstdc++-v3/crossconfig.m4 b/libstdc++-v3/crossconfig.m4
index b3269cb88e0..0be2eee5757 100644
--- a/libstdc++-v3/crossconfig.m4
+++ b/libstdc++-v3/crossconfig.m4
@@ -174,6 +174,15 @@ case "${host}" in
 
     GCC_CHECK_TLS
     ;;
+  *-l4re*)
+    GLIBCXX_CHECK_COMPILER_FEATURES
+    GLIBCXX_CHECK_LINKER_FEATURES
+    GLIBCXX_CHECK_MATH_SUPPORT
+    GLIBCXX_CHECK_STDLIB_SUPPORT
+    GCC_CHECK_TLS
+    AC_CHECK_FUNCS(__cxa_thread_atexit_impl)
+    AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)
+    ;;
   *-linux* | *-uclinux* | *-gnu* | *-kfreebsd*-gnu | *-cygwin* | *-solaris*)
     GLIBCXX_CHECK_COMPILER_FEATURES
     GLIBCXX_CHECK_LINKER_FEATURES
-- 
2.39.5

