# This is an ancient self-built host toolchain that runs on the oldest
# currently supported Ubuntu LTS. Artifacts created by this toolchain are
# guaranteed to run there too. This enables the safe creation of host artifacts
# that can be used on a broad range of distributions.

shared: True

environment:
    AUTOCONF_TARGET: "$(gen-autoconf,bob_compat)"

depends:
    # The following tools are needed by the cross-toolchain build process.
    # Build them explicitly here to keep the basement::rootrecipe class
    # untainted.
    - name: devel::make
      use: [tools]
      forward: True
    - name: devel::m4
      use: [tools]
      forward: True
    - name: devel::help2man
      use: [tools]
      forward: True
    - name: devel::texinfo
      use: [tools]
      forward: True
    - name: devel::autotools
      use: [tools]
      forward: True
    - name: devel::gettext
      use: [tools]
      forward: True
    - name: devel::bison
      use: [tools]
      forward: True
    - name: devel::flex
      use: [tools]
      forward: True
    - name: python::python3-minimal
      use: [tools]
      forward: True
      tools:
          # To cross-compile python3, a working python interpreter is required.
          # Instead, build the interpreter with the native host toolchain. It's
          # just used for building glibc and won't be needed otherwise.
          target-toolchain: host-native-toolchain

    # Cross toolchain for the current architecture -> ARCH is left as is.
    - name: devel::compat::cross-toolchain
      use: [environment, tools]
      forward: True
      environment:
          AUTOCONF_TARGET: "$(gen-autoconf,bob_isolation)"

    # Canadian cross toolchain. Built with above cross toolchain for the real
    # $AUTOCONF_TARGET as set in environment above.
    - devel::compat::binutils
    - devel::compat::gcc-canadian-cross

buildTools: [target-toolchain]
buildVars: [TOOLCHAIN_SYSROOT, AUTOCONF_TARGET]
buildScript: |
    rm -rf *

    cp -an ${BOB_DEP_PATHS[devel::compat::binutils]}/* .
    cp -an ${BOB_DEP_PATHS[devel::compat::gcc-canadian-cross]}/* .

    mkdir -p usr/sysroots/$AUTOCONF_TARGET/usr/lib
    # Reuse libc from bob_isolation cross-toolchain. No need to build again with a bob_compat toolchain.
    cp -an ${BOB_TOOL_PATHS[target-toolchain]}/$TOOLCHAIN_SYSROOT/* usr/sysroots/$AUTOCONF_TARGET
    rsync -aHSK usr/$AUTOCONF_TARGET/lib/ \
      usr/sysroots/$AUTOCONF_TARGET/usr/lib/ \
      --include '*.so.*' \
      --exclude '*'

packageScript: |
    cp -a "$1"/* .
    # We certainly won't debug the toolchain...
    find . -type d -name .debug | xargs /bin/rm -rf

# This fingerprintScript checks for the minimum libc/libstdc++ version on the
# host. It will output nothing but will fail if the host is not able to run the
# toolchain binaries.
fingerprintIf: True
fingerprintScript: &check-host |
    # required for sandbox where gcc is not in PATH
    export PATH="$PATH:/toolchain/bin"

    # check glibc host version
    IFS="$IFS." read -r -d "" ARCH TYPE MAJOR MINOR <<<"$(bob-libc-version gcc)" || true
    if [[ $TYPE != glibc ]] ; then
        echo "These recipes assume that your host is using glibc!" >&2
        exit 1
    fi
    if [[ $MAJOR -ne 2 || $MINOR -lt 31 ]] ; then
        echo "Your host glibc version is too old!" >&2
        exit 1
    fi

    # Check libstdc++ host version. See https://gcc.gnu.org/develop.html#timeline
    read -r -d "" ARCH TYPE STAMP <<<"$(bob-libstdc++-version g++)" || true
    if [[ $TYPE != "libstdc++" ]] ; then
        echo "These recipes assume that your host is using libstdc++!" >&2
        exit 1
    fi
    if [[ $STAMP -lt 20220313 ]] ; then
        echo "Your host libstdc++ version is too old!" >&2
        exit 1
    fi

provideTools:
    target-toolchain:
        path: "usr/bin"
        # make sure host can run created binaries
        fingerprintIf: True
        fingerprintScript: *check-host
        environment:
            # usual compiler variables
            AR: "${AUTOCONF_TARGET}-ar"
            AS: "${AUTOCONF_TARGET}-as"
            CC: "${AUTOCONF_TARGET}-gcc"
            CPP: "${AUTOCONF_TARGET}-cpp"
            CXX: "${AUTOCONF_TARGET}-g++"
            LD: "${AUTOCONF_TARGET}-ld"
            NM: "${AUTOCONF_TARGET}-nm"
            OBJCOPY: "${AUTOCONF_TARGET}-objcopy"
            OBJDUMP: "${AUTOCONF_TARGET}-objdump"
            RANLIB: "${AUTOCONF_TARGET}-ranlib"
            READELF: "${AUTOCONF_TARGET}-readelf"
            STRIP: "${AUTOCONF_TARGET}-strip"

            # meta information
            ARCH: "${ARCH}"
            AUTOCONF_HOST: "${AUTOCONF_TARGET}"
            CROSS_COMPILE: "${AUTOCONF_TARGET}-"
            TOOLCHAIN_SYSROOT: "../sysroots/${AUTOCONF_TARGET}"

    # Provide as "host-compat-toolchain". Used by recipes to explicitly compile
    # for the host, overriding their currently set default target toolchain.
    # Compared to the target-toolchain it explicitly overrides the various
    # compiler flags to be able to safely use it as override for selected
    # packages.
    host-compat-toolchain:
        path: "usr/bin"
        # make sure host can run created binaries
        fingerprintIf: True
        fingerprintScript: *check-host
        environment:
            # usual compiler variables
            AR: "${AUTOCONF_TARGET}-ar"
            AS: "${AUTOCONF_TARGET}-as"
            CC: "${AUTOCONF_TARGET}-gcc"
            CPP: "${AUTOCONF_TARGET}-cpp"
            CXX: "${AUTOCONF_TARGET}-g++"
            LD: "${AUTOCONF_TARGET}-ld"
            NM: "${AUTOCONF_TARGET}-nm"
            OBJCOPY: "${AUTOCONF_TARGET}-objcopy"
            OBJDUMP: "${AUTOCONF_TARGET}-objdump"
            RANLIB: "${AUTOCONF_TARGET}-ranlib"
            READELF: "${AUTOCONF_TARGET}-readelf"
            STRIP: "${AUTOCONF_TARGET}-strip"

            # meta information
            ARCH: "${ARCH}"
            AUTOCONF_HOST: "${AUTOCONF_TARGET}"
            CROSS_COMPILE: "${AUTOCONF_TARGET}-"
            TOOLCHAIN_SYSROOT: "../sysroots/${AUTOCONF_TARGET}"

            # Override compiler flags to mask active settings.
            #
            # Attention: keep in sync with default.yaml! These flags should be
            # reset exactly to their default values.
            CPPFLAGS:   "-Wdate-time"
            CFLAGS:     "-Os -pipe -fPIC"
            CXXFLAGS:   "-Os -pipe -fPIC"
            LDFLAGS:    "-Wl,-O1 -Wl,--hash-style=gnu"
