# This is an ancient self-built host toolchain that runs on the oldest
# currently supported Ubuntu LTS. Artifacts created by this toolchain are
# guaranteed to run there too. This enables the safe creation of host artifacts
# that can be used on a broad range of distributions.

shared: True

depends:
    # The following tools are needed by the cross-toolchain build process.
    # Build them explicitly here to keep the basement::rootrecipe class
    # untainted.
    - name: devel::bison
      use: [tools]
      forward: True
    - name: devel::flex
      use: [tools]
      forward: True

    - name: devel::compat::cross-toolchain
      use: [environment, tools]
      forward: True
      environment:
        AUTOCONF_TARGET: "x86_64-bob_compat-linux-gnu"
        ARCH: x86_64
        BASEMENT_OPTIMIZE: "s"
        BASEMENT_DEBUG: "0"

    - devel::compat::binutils
    - devel::compat::gcc-native

buildScript: |
    for i in "${@:2}" ; do
        cp -a "$i"/* .
    done

packageScript: |
    cp -a "$1"/* .

# This fingerprintScript checks for the minimum libc/libstdc++ version on the
# host. It will output nothing but will fail if the host is not able to run the
# toolchain binaries.
fingerprintIf: True
fingerprintScript: &check-host |
    # required for sandbox where gcc is not in PATH
    export PATH="$PATH:/toolchain/bin"

    # check glibc host version
    IFS="$IFS." read -r -d "" ARCH TYPE MAJOR MINOR <<<"$(bob-libc-version gcc)" || true
    if [[ $TYPE != glibc ]] ; then
        echo "These recipes assume that your host is using glibc!" >&2
        exit 1
    fi
    if [[ $MAJOR -ne 2 || $MINOR -lt 23 ]] ; then
        echo "Your host glibc version is too old!" >&2
        exit 1
    fi

    # check libstdc++ host version
    read -r -d "" ARCH TYPE STAMP <<<"$(bob-libstdc++-version g++)" || true
    if [[ $TYPE != "libstdc++" ]] ; then
        echo "These recipes assume that your host is using libstdc++!" >&2
        exit 1
    fi
    if [[ $STAMP -lt 20160603 ]] ; then
        echo "Your host libstdc++ version is too old!" >&2
        exit 1
    fi

provideTools:
    host-toolchain:
        path: "usr/bin"
        libs: [ "usr/lib" ]

    target-toolchain:
        path: "usr/bin"
        libs: [ "usr/lib" ]
        # make sure host can run created binaries
        fingerprintIf: True
        fingerprintScript: *check-host

provideVars:
    # usual compiler variables
    AR: "ar"
    AS: "as"
    CC: "gcc"
    CPP: "cpp"
    CXX: "g++"
    GDB: "gdb"
    LD: "ld"
    NM: "nm"
    OBJCOPY: "objcopy"
    OBJDUMP: "objdump"
    RANLIB: "ranlib"
    STRIP: "strip"

    # Some meta variables do not change: ARCH, AUTOCONF_BUILD, AUTOCONF_HOST
    ARCH: "${ARCH}"
    AUTOCONF_BUILD: "${AUTOCONF_HOST}"
    AUTOCONF_HOST:  "${AUTOCONF_HOST}"
    CROSS_COMPILE: ""
    TOOLCHAIN_SYSROOT: ""

    # compiler flags
    CPPFLAGS:   "-Wdate-time"
    CFLAGS:     "-Os -pipe"
    CXXFLAGS:   "-Os -pipe"
    LDFLAGS:    "-Wl,-O1 -Wl,--hash-style=gnu"
