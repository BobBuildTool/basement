inherit: [install]

metaEnvironment:
    PKG_VERSION: "1.89.0"
    PKG_LICENSE: "Apache-2.0 or MIT"

multiPackage:
    # rust compiler + std lib + tools like cargo
    "":
        environment:
            RUST_ARCH: $(rustc-target,$(get-tool-env,"target-toolchain","AUTOCONF_HOST","$AUTOCONF_BUILD"))

        checkoutSCM:
            scm: url
            url: https://static.rust-lang.org/dist/rust-${PKG_VERSION}-${RUST_ARCH}.tar.xz
            digestSHA1: >-
                $(strip,$(if-then-else,$(eq,$RUST_ARCH,aarch64-unknown-linux-gnu),8b2fe2ebcc0c1ac7bc9225b24e0a966d1c5686e0,)
                        $(if-then-else,$(eq,$RUST_ARCH,armv7-unknown-linux-gnueabihf),1402fc0848f611db096a8a54a890f6031040faab,)
                        $(if-then-else,$(eq,$RUST_ARCH,i686-unknown-linux-gnu),da39a3ee5e6b4b0d3255bfef95601890afd80709,)
                        $(if-then-else,$(eq,$RUST_ARCH,x86_64-unknown-linux-gnu),4cdfb6111b27f308be05d8d985b0e4defe9c2298,))
            stripComponents: 1

        buildVars: [RUST_ARCH]
        buildScript: |
            $1/install.sh --destdir=$PWD/install \
                --prefix=/usr \
                --disable-ldconfig \
                --components=rustc,cargo,rust-std-$RUST_ARCH
            rm -f install/usr/lib/rustlib/install.log install/usr/lib/rustlib/manifest-*

        packageScript: |
            installCopy "$1/install/"

    # extra rust std lib used for cross compiling
    std:
        environment:
            RUST_ARCH: "${RUST_ARCH:-$(rustc-target,$(get-tool-env,target-toolchain,AUTOCONF_HOST,$AUTOCONF_BUILD))}"

        checkoutSCM:
            scm: url
            url: https://static.rust-lang.org/dist/rust-std-${PKG_VERSION}-${RUST_ARCH}.tar.xz
            digestSHA1: >-
                $(strip,$(if-then-else,$(eq,$RUST_ARCH,aarch64-unknown-linux-gnu),e58f3f9da3234671ff49f1e73403fd62caac4295,)
                        $(if-then-else,$(eq,$RUST_ARCH,armv7-unknown-linux-gnueabihf),95a7464794b5835fbef0151d8af2a6f4169f00c2,)
                        $(if-then-else,$(eq,$RUST_ARCH,i686-unknown-linux-gnu),3951a510fb0c01023c79e4e76a4df1345ffee1a5,)
                        $(if-then-else,$(eq,$RUST_ARCH,x86_64-unknown-linux-gnu),5337f81b7ed691f0c5628604c13a6a25aaca0b81,))
            stripComponents: 1

        buildScript: |
            $1/install.sh --destdir=$PWD/install \
                --prefix=/usr \
                --disable-ldconfig
            rm -f install/usr/lib/rustlib/install.log install/usr/lib/rustlib/manifest-*

        packageScript: |
            # we have to use copy, because there are cross libs
            installCopy "$1/install/"

    # host rust compiler + cross std lib as tool
    cross:
        depends:
            - name: devel::rustc
              tools:
                  target-toolchain: host-compat-toolchain
            - name: devel::rustc-std
              if: !expr >
                rustc-target("$AUTOCONF_BUILD") !=
                    rustc-target(get-tool-env("target-toolchain", "AUTOCONF_HOST", "$AUTOCONF_BUILD"))

        buildScript: |
            # copy both deps into this package, because for tools we don't
            # really have deps tracking
            for i in "${@:2}" ; do
                rsync -aHK "$i/" install/
            done

        packageScript: |
            # we have to use copy, because there are cross libs
            installCopy "$1/install/"
        provideTools:
            rustc: "usr/bin"
