environment:
    GNU_MIRROR: "http://ftp.gnu.org/pub/gnu"
    GITHUB_MIRROR: "https://github.com"
    KERNEL_MIRROR: "https://cdn.kernel.org/pub"
    SOURCEFORGE_MIRROR: "https://downloads.sourceforge.net"
    SOURCEWARE_MIRROR: "https://sourceware.org/pub"

    # default compile flags
    BASEMENT_OPTIMIZE: "s" # compiler optimization level (0/1/2/s)
    BASEMENT_DEBUG: "1"    # generate debug symbols (0/1)

    ##########################################################################
    # The following variables describe the currently active toolchain and
    # should not be overridden by the user.
    ##########################################################################

    # The default build system triplet (i.e. the system that the build runs on)
    # definition.
    ARCH:           "$(host-arch)"
    AUTOCONF_BUILD: "$(host-autoconf)"

    # Default host compilation flags. Only cross-compiling target toolchains
    # will override these based on the BASEMENT_DEBUG and BASEMENT_OPTIMIZE
    # settings above.
    #
    # We build everything static on host builds without debug symbols. Some
    # packages still build shared libraries, though. Make sure we compile
    # position independent code in case static and dynamic libraries are mixed.
    #
    # Attention: keep in sync with devel::host-compat-toolchain! These flags
    # should be reset by the compat-toolchain exactly to their default values.
    CPPFLAGS:   "-Wdate-time"
    CFLAGS:     "-Os -pipe -fPIC"
    CXXFLAGS:   "-Os -pipe -fPIC"
    LDFLAGS:    "-Wl,-O1 -Wl,--hash-style=gnu"

archiveAppend:
    backend: http
    name: ci.bobbuildtool.dev
    url: http://ci.bobbuildtool.dev/artifacts/
    flags: [download]

fallbackMirrorAppend:
    # OpenSSL unfortunately moves its older releases in another location. :(
    - scm: url
      url: "https://www.openssl.org/source/openssl-([0-9]+\\.[0-9]+)(.+)"
      mirror: "https://www.openssl.org/source/old/\\1/openssl-\\1\\2"

include:
    - user

# Keep ssh-agent working. Note: this is just enough so that checkoutSCM is
# working. If you need ssh access from a checkoutScript too you have to add
# the lines below to your projects default.yaml.
whitelist: ["SSH_AGENT_PID", "SSH_AUTH_SOCK"]
# sandbox:
#    mount:
#        - [ "\\$HOME/.ssh", "/nonexistent/.ssh"]
#        - [ "\\$SSH_AUTH_SOCK", "\\$SSH_AUTH_SOCK", [nojenkins, nofail] ]
