# Common class C/C++ based packages. It updates the various compiler flags
# variables so that the dependencies are found by the toolchains. Pulls in
# pkg-config too for the same reason.

inherit: [pkg-config]

buildTools: [target-toolchain]
buildVars: [AUTOCONF_BUILD, AUTOCONF_HOST, CPPFLAGS, CFLAGS, CXXFLAGS, LDFLAGS,
            BASEMENT_LIBS]

# The following variables are only used by the Microsoft Visual Studio
# toolchain. Their value depends on the install location but they do not change
# the build result. The toolset version is handled by the toolchain directly
# and is attached to 'target-toolchain'.
buildVarsWeak: [INCLUDE, LIB, LIBPATH, VS_PATH]
buildSetup: |
    # Check if we're officially cross-compiling
    cpackageCrossCompiling()
    {
        if [[ "${AUTOCONF_BUILD:-unknown}" != "${AUTOCONF_HOST:-${AUTOCONF_BUILD:-unknown}}" ]]; then
            return 0 # cross compiling
        else
            return 1 # native build
        fi
    }

    # Get desired library type: "static", "shared" or "both".
    #
    # By default shared libraries are built when cross-compiling and static
    # libraries on host builds. This can be overridded by setting BASEMENT_LIBS
    # to "static", "shared" or "both".
    cpackageLibraryType()
    {
        if [[ -n "${BASEMENT_LIBS:-}" ]] ; then
            echo "$BASEMENT_LIBS"
        elif cpackageCrossCompiling ; then
            echo shared
        else
            echo static
        fi
    }

    # Check $BASEMENT_LIBS values to catch misconfigurations early
    case "${BASEMENT_LIBS:-__unset__}" in
        static | shared | both | __unset__)
            ;;
        *)
            echo "Invalid BASEMENT_LIBS value: $BASEMENT_LIBS" >&2
            exit 1
            ;;
    esac

    # In case we build on Windows the global paths need to be added to $PATH.
    ${VS_PATH:+export PATH="$PATH:$VS_PATH"}

    # Gather all include and library paths.
    if [[ $AUTOCONF_HOST == *-win32 ]] ; then
        for i in "${@:2}" ; do
            if [[ -d "$i/usr/include" ]] ; then
                CPPFLAGS+=" -I $(cygpath -w "$i/usr/include")"
            fi
            for j in lib usr/lib ; do
                if [[ -d "$i/$j" ]] ; then
                    LDFLAGS+=" -LIBPATH:$(cygpath -w "$i/$j")"
                fi
            done
        done
    else
        for i in "${@:2}" ; do
            if [[ -d "$i/usr/include" ]] ; then
                CPPFLAGS+=" -I$i/usr/include"
            fi
            for j in lib usr/lib ; do
                if [[ -d "$i/$j" ]] ; then
                    LDFLAGS+=" -L$i/$j"
                    if compgen -G "$i/$j/*.so" >/dev/null ; then
                        LDFLAGS+=" -Wl,-rpath-link=$i/$j"
                    fi
                fi
            done
        done
    fi

    [ -z "${CPPFLAGS:+true}" ] || export CPPFLAGS
    [ -z "${LDFLAGS:+true}" ] || export LDFLAGS

