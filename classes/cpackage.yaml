# Common class C/C++ based packages. It updates the various compiler flags
# variables so that the dependencies are found by the toolchains. Pulls in
# pkg-config too for the same reason.

inherit: [pkg-config, "basement::bits::libs"]

buildTools: [target-toolchain]
buildVars: [AUTOCONF_BUILD, AUTOCONF_HOST, CPPFLAGS, CFLAGS, CXXFLAGS, LDFLAGS,
            BASEMENT_LIBS]

# The following variables are only used by the Microsoft Visual Studio
# toolchain. Their value depends on the install location but they do not change
# the build result. The toolset version is handled by the toolchain directly
# and is attached to 'target-toolchain'.
buildVarsWeak: [INCLUDE, LIB, LIBPATH, VS_PATH]
buildSetup: |
    cpackageCrossCompiling()
    {
        basementBitsCrossCompiling
    }

    cpackageLibraryType()
    {
        basementBitsLibraryType
    }

    cpackageLibraryTypeCheck()
    {
        case $(cpackageLibraryType) in
            static)
                echo "$1"
                ;;
            shared)
                echo "$2"
                ;;
            both)
                echo "$1 $2"
                ;;
        esac
    }

    # In case we build on Windows the global paths need to be added to $PATH.
    ${VS_PATH:+export PATH="$PATH:$VS_PATH"}

    # Gather all include and library paths.
    if [[ $AUTOCONF_HOST == *-win32 ]] ; then
        for i in "${@:2}" ; do
            if [[ -d "$i/usr/include" ]] ; then
                CPPFLAGS+=" -I $(cygpath -w "$i/usr/include")"
            fi
            for j in lib usr/lib ; do
                if [[ -d "$i/$j" ]] ; then
                    LDFLAGS+=" -LIBPATH:$(cygpath -w "$i/$j")"
                fi
            done
        done
    else
        for i in "${@:2}" ; do
            if [[ -d "$i/usr/include" ]] ; then
                CPPFLAGS+=" -I$i/usr/include"
            fi
            for j in lib usr/lib ; do
                if [[ -d "$i/$j" ]] ; then
                    LDFLAGS+=" -L$i/$j"
                    if compgen -G "$i/$j/*.so" >/dev/null ; then
                        LDFLAGS+=" -Wl,-rpath-link=$i/$j"
                    fi
                fi
            done
        done
    fi

    [ -z "${CPPFLAGS:+true}" ] || export CPPFLAGS
    [ -z "${LDFLAGS:+true}" ] || export LDFLAGS
