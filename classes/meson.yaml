inherit: [cpackage, install, python3]

buildToolsWeak: [meson, ninja]
buildVars: [CC, CXX, AR, STRIP, NM]
buildSetup: |
    # Set a generic utf-8 locale. Introduced by Debian and seems to work on
    # Fedora too. If not set meson will barf on the first non 7-bit ASCII
    # character.
    export LANG=C.UTF-8

    function meson_join_space { local IFS=" "; echo "$*"; }
    function meson_join_list { echo -n "'$1" ; shift ; printf "%s" "${@/#/\', \'}"; echo "'" ; }

    # Parse flags into clean arrays. Meson does not honor CPPFLAGS so merge
    # then with C(XX)FLAGS. The variables are explicitly not quoted to split
    # them into array elements.
    declare -a MESON_CFLAGS=( ${CPPFLAGS:-} ${CFLAGS:-} )
    declare -a MESON_CXXFLAGS=( ${CPPFLAGS:-} ${CXXFLAGS:-} )
    declare -a MESON_LDFLAGS=( ${LDFLAGS:-} )
    unset CPPFLAGS

    # For native build we pass CFLAGS, otherwise we have to pass them in
    # cross_file.txt
    if cpackageCrossCompiling ; then
        unset CFLAGS
        unset CXXFLAGS
        unset LDFLAGS

        case "$AUTOCONF_HOST" in
            *-msys | *-win32)
                MESON_SYSTEM=windows
                ;;
            *-linux-*)
                MESON_SYSTEM=linux
                ;;
            *-l4re)
                MESON_SYSTEM=l4re
                ;;
            *)
                echo "Unsupported system: $AUTOCONF_HOST" >&2
                exit 1
                ;;
        esac

        case "$AUTOCONF_HOST" in
            aarch64-*)
                MESON_CPU_FAMILY=aarch64
                : ${MESON_CPU=armv8}
                ;;
            arm-*)
                MESON_CPU_FAMILY=arm
                : ${MESON_CPU=armv7}
                ;;
            i[34567]86-*)
                MESON_CPU_FAMILY=x86
                : ${MESON_CPU=i686}
                ;;
            riscv32-*)
                MESON_CPU_FAMILY=riscv32
                : ${MESON_CPU=rv32gc}
                ;;
            riscv64-*)
                MESON_CPU_FAMILY=riscv64
                : ${MESON_CPU=rv64gc}
                ;;
            x86_64-*)
                MESON_CPU_FAMILY=x86_64
                : ${MESON_CPU=x86_64}
                ;;
            *)
                echo "Unsupported cpu family: $AUTOCONF_HOST" >&2
                exit 1
                ;;
        esac

        cat >cross_file.txt <<EOF
    [host_machine]
    system = '$MESON_SYSTEM'
    cpu_family = '$MESON_CPU_FAMILY'
    cpu = '$MESON_CPU'
    endian = 'little'
    [binaries]
    c     = '$CC'
    cpp   = '$CXX'
    ar    = '$AR'
    strip = '$STRIP'
    nm    = '$NM'
    pkg-config = '$(which pkg-config)'
    [built-in options]
    c_args = [$(meson_join_list "${MESON_CFLAGS[@]}")]
    cpp_args = [$(meson_join_list "${MESON_CXXFLAGS[@]}")]
    c_link_args = [$(meson_join_list "${MESON_LDFLAGS[@]}")]
    cpp_link_args = [$(meson_join_list "${MESON_LDFLAGS[@]}")]
    EOF
    else
        export CFLAGS=$(meson_join_space "${MESON_CFLAGS[@]}")
        export CXXFLAGS=$(meson_join_space "${MESON_CXXFLAGS[@]}")
        export LDFLAGS=$(meson_join_space "${MESON_LDFLAGS[@]}")
    fi

    # $1 : source path
    mesonBuild()
    {
        rm -rf install
        mkdir -p build install
        pushd build

        if [[ ! -e .meson-done ]] ; then
            declare -a MESON_OPTIONS=( "$1" "$PWD")
            if [[ -e $BOB_CWD/cross_file.txt ]] ; then
                MESON_OPTIONS+=("--cross-file" "$BOB_CWD/cross_file.txt")
            fi
            MESON_OPTIONS+=("-Ddefault_library=$(cpackageLibraryType)")
            MESON_OPTIONS+=( --prefix /usr --libdir lib --buildtype plain )
            MESON_OPTIONS+=( "${@:2}" )
            meson setup "${MESON_OPTIONS[@]}"
            touch .meson-done
        fi
        DESTDIR="$PWD/../install" ninja install
        popd
    }

packageSetup: |
   _MESON_BUILD_PATH=$1

    mesonPackageBin()
    {
        installPackageBin "${1:-${_MESON_BUILD_PATH}}/install/" "${@:2}"
    }

    mesonPackageDev()
    {
        installPackageDev "${1:-${_MESON_BUILD_PATH}}/install/" "${@:2}"
    }

    mesonPackageLib()
    {
        installPackageLib "${1:-${_MESON_BUILD_PATH}}/install/" "${@:2}"
    }

    mesonPackageTgt()
    {
        installPackageTgt "${1:-${_MESON_BUILD_PATH}}/install/" "${@:2}"
    }
