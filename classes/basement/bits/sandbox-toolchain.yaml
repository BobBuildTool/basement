# This package makes some assumptions about the host if we are not in a
# sandbox. Do a quick check if gcc is around and that it's a compatible
# compiler for our configuration.
fingerprintIf: True
fingerprintVars: [AUTOCONF_BUILD]
fingerprintScript: |
    if [[ ! -e /bob || ! -e /toolchain/bin ]] ; then
        GCC_MACHINE="$(gcc -dumpmachine 2>/dev/null)"
        case "$AUTOCONF_BUILD" in
            "$GCC_MACHINE")
                ;;
            i[34567]86-*linux-gnu)
                if [[ $GCC_MACHINE != i[34567]86-*linux-gnu ]] ; then
                    echo "Expected a compatible i386 host compiler!" >&2
                    exit 1
                fi
                ;;
            x86_64-*linux-gnu)
                if [[ $GCC_MACHINE != x86_64-*linux-gnu ]] ; then
                    echo "Expected a compatible x86_64 host compiler!" >&2
                    exit 1
                fi
                ;;
            *)
                echo "Expected a compatible ($AUTOCONF_BUILD) host compiler!" >&2
                exit 1
        esac
    fi

packageVars: [AUTOCONF_BUILD, SANDBOX_AUTOCONF_BUILD]
packageScript: |
    # Create a wrapper scripts that prefer the right executable in /toolchain
    # and (if we are outside of a sandbox) fall back to globally installed
    # versions.
    TOOLS=(addr2line ar as c++ c++filt cpp elfedit g++ gcc gcov gdb)
    TOOLS+=(gprof ld nm objcopy objdump ranlib readelf size strings strip)
    for i in  ${TOOLS[@]}; do
        ln -sf /toolchain/bin/$i
        cat >${SANDBOX_AUTOCONF_BUILD}-$i <<EOF
    #!/bin/bash
    [[ -x "/toolchain/bin/${SANDBOX_AUTOCONF_BUILD}-$i" ]] && exec "/toolchain/bin/${SANDBOX_AUTOCONF_BUILD}-$i" "\$@"
    type -p "${AUTOCONF_BUILD}-$i" >/dev/null && exec "${AUTOCONF_BUILD}-$i" "\$@"
    exec $i "\$@"
    EOF
    done

    # make all scripts executable
    chmod +x ${SANDBOX_AUTOCONF_BUILD}-*

provideTools:
    host-toolchain: "."
    target-toolchain: &target-toolchain
        path: "."
        environment:
            # Default tool names.
            AR: "ar"
            AS: "as"
            CC: "gcc"
            CPP: "cpp"
            CXX: "g++"
            LD: "ld"
            NM: "nm"
            OBJCOPY: "objcopy"
            OBJDUMP: "objdump"
            RANLIB: "ranlib"
            READELF: "readelf"
            STRIP: "strip"

            # Fallback variables for recipes that cannot work with clang.
            GNU_CC: "gcc"
            GNU_CPP: "cpp"
            GNU_CXX: "g++"
            GNU_LD: "ld"

            # meta information
            TOOLCHAIN_FLAVOUR: gcc
        fingerprintIf: True
        fingerprintScript: |
            # required for sandbox where gcc is not in PATH
            export PATH="$PATH:/toolchain/bin"
            bob-libc-version gcc
            bob-libstdc++-version g++
    host-compat-toolchain: *target-toolchain
    host-native-toolchain: *target-toolchain

provideVars:
    # Define our own build-architecture. It is distinct from the host
    # environment so that our toolchain is used and nothing is mixed with the
    # host compiler.
    AUTOCONF_BUILD: "${SANDBOX_AUTOCONF_BUILD}"
