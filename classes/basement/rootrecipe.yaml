root: True

depends:
    - if: !expr |
        "${BOB_HOST_PLATFORM}" == "linux"
      depends:
          # Setup sandbox with corresponding toolchain
          - name: devel::sandbox
            use: [sandbox]
            forward: True
          - name: devel::sandbox-toolchain
            use: [environment, tools]
            forward: True

          # Declare some initial tools that are needed to build the initial tools.
          - name: devel::bootstrap-fake-pkg-config
            use: [tools]
            forward: True

          # Use compatibility toolchain that practically runs on all major
          # distributions. The user might explicitly disable it's usage but this will
          # then taint all binary artifacts built for the host.
          - name: devel::host-compat-toolchain
            use: [environment, tools]
            forward: True
            if: "${BASEMENT_HOST_COMPAT_TOOLCHAIN:-1}"

          # Pick up all tools defined by the basement project. The downstream users
          # can pick them as they like. Make sure to update the basement::buildall
          # class to catch added tools too.

          - name: devel::make
            use: [tools]
            forward: True
          - name: perl::perl
            use: [tools]
            forward: True
          - name: devel::m4
            use: [tools]
            forward: True
          - name: devel::help2man
            use: [tools]
            forward: True
          - name: devel::texinfo
            use: [tools]
            forward: True
          - name: devel::autotools
            use: [tools]
            forward: True
          - name: devel::gettext
            use: [tools]
            forward: True
          - name: devel::bison
            use: [tools]
            forward: True
          - name: devel::cmake-bootstrap  # CMake is self-hosted and has a circular
            use: [tools]                  # dependency to itself in proper builds.
            forward: True
          - name: devel::pkg-config-tool
            use: [tools]
            forward: True
          - name: python::python3-minimal
            use: [tools]
            forward: True
            tools:
                # To build python3 a working python interpreter is required. Build
                # a bootstrap python3 interpreter with the native host toolchain.
                # The real interpreter is then built with the
                # host-compat-toolchain.
                target-toolchain: host-native-toolchain
          - name: python::python3
            use: [tools]
            forward: True
          - name: devel::ninja
            use: [tools]
            forward: True
          - name: devel::meson
            use: [tools]
            forward: True
          - name: devel::flex
            use: [tools]
            forward: True
          - name: devel::cmake            # Overwrite "cmake" tool with properly
            use: [tools]                  # built one.
            forward: True
          - name: core::util-linux
            use: [tools]
            forward: True
          - name: devel::llvm
            use: [tools]
            forward: true
          - name: devel::llvm-clang
            use: [tools]
            forward: true

    - if: !expr |
        "${BOB_HOST_PLATFORM}" == "msys"
      depends:
          # Just declare the MSYS gcc as toolchain. The user will most probably
          # use a visual studio toolchain or clang as target toolchain.
          - name: devel::bootstrap-host-toolchain
            use: [tools]
            forward: True

          # Define a couple of tools. They are all native win32 executables for
          # speed reasons.
          - name: devel::bootstrap-fake-pkg-config
            use: [tools]
            forward: True
          - name: devel::win::msbuild
            use: [tools]
            forward: True
          - name: devel::win::cmake
            use: [tools]
            forward: True
          - name: devel::win::ninja
            use: [tools]
            forward: True
