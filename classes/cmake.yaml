inherit: [cpackage, make, install]

buildTools: [cmake]
buildVars: [CC, CXX]
buildScript: |
    _CMAKE_SOURCE_PATH=$1

    # Make sure CMake finds other stuff by its own logic too
    CMAKE_FIND_ROOT_PATH=
    for i in "${@:2}" ; do
        CMAKE_FIND_ROOT_PATH+="${CMAKE_FIND_ROOT_PATH:+;}$i"
    done

    # CMake does not honor CPPFLAGS! Merge them with C(XX)FLAGS.
    if [ "${CPPFLAGS:+true}" ] ; then
        CFLAGS+=" ${CPPFLAGS}"
        CXXFLAGS+=" ${CPPFLAGS}"
        unset CPPFLAGS
    fi
    [ -z "${CFLAGS:+true}" ] || export CFLAGS
    [ -z "${CXXFLAGS:+true}" ] || export CXXFLAGS

    # Create a toolchain file if cross-compiling
    if [[ "${AUTOCONF_BUILD:-unknown}" != "${AUTOCONF_HOST:-${AUTOCONF_BUILD:-unknown}}" ]]; then
        CMAKE_SYSTEM_NAME=
        case "$AUTOCONF_HOST" in
            *-linux-*)
                CMAKE_SYSTEM_NAME=Linux
                ;;
            *)
                CMAKE_SYSTEM_NAME=Generic
                ;;
        esac
        cat >toolchain.cmake <<EOF
    set(CMAKE_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
    set(CMAKE_C_COMPILER ${CC})
    set(CMAKE_CXX_COMPILER ${CXX})
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
    EOF
        CMAKE_TOOLCHAIN_FILE="$PWD/toolchain.cmake"
        BUILD_SHARED_LIBS=ON
    else
        BUILD_SHARED_LIBS=OFF
    fi

    cmakeBuild()
    {
        local MAKE_TARGET=
        local MAKE_OPTIONS=( )
        local INSTALL_TARGET=install
        local INSTALL_OPTIONS=( )
        local SOURCE_PATH=${_CMAKE_SOURCE_PATH}

        # parse arguments
        local OPTIND=1
        local opt
        while getopts "i:m:o:O:s:" opt ; do
            case "$opt" in
                i)
                    INSTALL_TARGET="$OPTARG"
                    ;;
                m)
                    MAKE_TARGET="$OPTARG"
                    ;;
                o)
                    MAKE_OPTIONS+=( "$OPTARG" )
                    ;;
                O)
                    INSTALL_OPTIONS+=( "$OPTARG" )
                    ;;
                s)
                    SOURCE_PATH="$OPTARG"
                    ;;
                --)
                    break
                    ;;
                \?)
                    echo "invalid option: $OPTARG" >&2
                    exit 1
                    ;;
            esac
        done
        shift $(( OPTIND -1 ))

        mkdir -p build install
        pushd build
        cmake "$SOURCE_PATH" \
            ${CMAKE_TOOLCHAIN_FILE:+-DCMAKE_TOOLCHAIN_FILE="$CMAKE_TOOLCHAIN_FILE"} \
            -DCMAKE_FIND_ROOT_PATH="$CMAKE_FIND_ROOT_PATH" \
            -DCMAKE_BUILD_TYPE=Bob \
            -DCMAKE_INSTALL_PREFIX="/usr" \
            -DBUILD_SHARED_LIBS=$BUILD_SHARED_LIBS \
            $@
        makeParallel $MAKE_TARGET ${MAKE_OPTIONS:+"${MAKE_OPTIONS[@]}"}
        if [[ -n "$INSTALL_TARGET" ]] ; then
            make $INSTALL_TARGET \
                DESTDIR=${PWD}/../install \
                ${INSTALL_OPTIONS:+"${INSTALL_OPTIONS[@]}"}
        fi
        popd
    }

packageScript: |
    _CMAKE_BUILD_PATH=$1

    cmakePackageBin()
    {
        installPackageBin "${1:-${_CMAKE_BUILD_PATH}}/install/" "${@:2}"
    }

    cmakePackageDev()
    {
        installPackageDev "${1:-${_CMAKE_BUILD_PATH}}/install/" "${@:2}"
    }

    cmakePackageLib()
    {
        installPackageLib "${1:-${_CMAKE_BUILD_PATH}}/install/" "${@:2}"
    }

    cmakePackageTgt()
    {
        installPackageTgt "${1:-${_CMAKE_BUILD_PATH}}/install/" "${@:2}"
    }
