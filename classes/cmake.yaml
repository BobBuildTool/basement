inherit: [cpackage, ninja, install]

buildToolsWeak: [cmake]
buildVars: [AUTOCONF_HOST, CC, CXX]
buildSetup: |
    # Make sure CMake finds other stuff by its own logic too
    CMAKE_FIND_ROOT_PATH=
    for i in "${@:2}" ; do
        # If we build for native Windows a native CMake is used and we need to
        # convert to Windows paths.
        [[ "$AUTOCONF_BUILD" == *-msys ]] && i="$(cygpath -m $i)"
        CMAKE_FIND_ROOT_PATH+="${CMAKE_FIND_ROOT_PATH:+;}$i"
    done

    # It is necessary to add the sysroot path of gcc/g++ if available too
    # because our host-compat-toolchain has a non-standard sysroot
    # even though it's a native compiler
    if [[ "$CC" == "gcc" ]] ; then
        SYSROOT="$($CC -print-sysroot)"
    fi
    [ -z "${SYSROOT:+true}" ] || CMAKE_FIND_ROOT_PATH+="${CMAKE_FIND_ROOT_PATH:+;}${SYSROOT}"

    # This looks odd but it prevents MSYS from converting /usr to C:\msys64\usr
    # (or wherever MSYS was installed). See
    # http://mingw.org/wiki/Posix_path_conversion
    if [[ "$AUTOCONF_BUILD" == *-msys ]] ; then
        CMAKE_INSTALL_PREFIX="//usr"
        CMAKE_INSTALL_SYSCONFDIR="//etc"
    else
        CMAKE_INSTALL_PREFIX="/usr"
        CMAKE_INSTALL_SYSCONFDIR="/etc"
    fi

    # CMake does not honor CPPFLAGS! Merge them with C(XX)FLAGS.
    if [ "${CPPFLAGS:+true}" ] ; then
        CFLAGS+=" ${CPPFLAGS}"
        CXXFLAGS+=" ${CPPFLAGS}"
        unset CPPFLAGS
    fi
    [ -z "${CFLAGS:+true}" ] || export CFLAGS
    [ -z "${CXXFLAGS:+true}" ] || export CXXFLAGS

    # Create a toolchain file if cross-compiling
    if cpackageCrossCompiling ; then
        CMAKE_SYSTEM_NAME=
        case "$AUTOCONF_HOST" in
            *-linux-*)
                CMAKE_SYSTEM_NAME=Linux
                ;;
            *-msys|*-win32)
                CMAKE_SYSTEM_NAME=Windows
                ;;
            *)
                CMAKE_SYSTEM_NAME=Generic
                ;;
        esac

        CMAKE_SYSTEM_PROCESSOR=
        if [ x"${AUTOCONF_HOST##*-}" == xwin32 ] ; then
            case "$AUTOCONF_HOST" in
                x86_64-*)
                    CMAKE_SYSTEM_PROCESSOR=AMD64
                    ;;
                x86-*)
                    CMAKE_SYSTEM_PROCESSOR=X86
                    ;;
                aarch64-*)
                    CMAKE_SYSTEM_PROCESSOR=ARM64
                    ;;
                *)
                    # Fall back to the raw processor prefix
                    CMAKE_SYSTEM_PROCESSOR=${AUTOCONF_HOST%%-*}
                    ;;
            esac
        else
            CMAKE_SYSTEM_PROCESSOR=${AUTOCONF_HOST%%-*}
        fi

        cat >toolchain.cmake <<EOF
    set(CMAKE_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
    set(CMAKE_C_COMPILER ${CC})
    set(CMAKE_CXX_COMPILER ${CXX})
    set(CMAKE_SYSTEM_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR})
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
    EOF
        CMAKE_TOOLCHAIN_FILE="$PWD/toolchain.cmake"
    fi

    # The build of shared libraries can be controlled on cmake. Unfortunately
    # there is no standard switch to control static libraries.
    case $(cpackageLibraryType) in
        shared|both)
            BUILD_SHARED_LIBS=ON
            ;;
        static)
            BUILD_SHARED_LIBS=OFF
            ;;
    esac

    # usage: cmakeBuild [-m <ninja_target>] [-o <ninja_options>]
    #                   [-n] [-i <install_component>]
    #                   <source-path> [-DCMAKE_...]
    cmakeBuild()
    {
        local MAKE_TARGETS=( )
        local MAKE_OPTIONS=( )
        local INSTALL=yes
        local INSTALL_COMPONENT=

        # parse arguments
        OPTIND=1
        local opt
        while getopts "i:m:no:" opt ; do
            case "$opt" in
                i)
                    INSTALL_COMPONENT="$OPTARG"
                    ;;
                m)
                    MAKE_TARGETS+=( "$OPTARG" )
                    ;;
                n)
                    INSTALL=
                    ;;
                o)
                    MAKE_OPTIONS+=( "$OPTARG" )
                    ;;
                \?)
                    echo "Invalid option: -$OPTARG" >&2
                    exit 1
                    ;;
            esac
        done
        shift $(( OPTIND -1 ))

        rm -rf install
        mkdir -p build install
        pushd build

        cmake "$1" \
            -G Ninja \
            ${CMAKE_TOOLCHAIN_FILE:+-DCMAKE_TOOLCHAIN_FILE="$CMAKE_TOOLCHAIN_FILE"} \
            -DCMAKE_FIND_ROOT_PATH="$CMAKE_FIND_ROOT_PATH" \
            -DCMAKE_BUILD_TYPE=Bob \
            -DCMAKE_INSTALL_PREFIX="$CMAKE_INSTALL_PREFIX" \
            -DCMAKE_INSTALL_SYSCONFDIR="$CMAKE_INSTALL_SYSCONFDIR" \
            -DBUILD_SHARED_LIBS=$BUILD_SHARED_LIBS \
            -DCMAKE_MSVC_RUNTIME_LIBRARY="" \
            "${@:2}"

        ninjaParallel ${MAKE_OPTIONS:+"${MAKE_OPTIONS[@]}"} \
            ${MAKE_TARGETS:+"${MAKE_TARGETS[@]}"}

        if [[ -n "$INSTALL" ]] ; then
            DESTDIR="${PWD}/../install" cmake \
                ${INSTALL_COMPONENT:+-DCOMPONENT="$INSTALL_COMPONENT"} \
                -P cmake_install.cmake
        fi
        popd
    }

packageSetup: |
    _CMAKE_BUILD_PATH=$1

    cmakePackageBin()
    {
        installPackageBin "${1:-${_CMAKE_BUILD_PATH}}/install/" "${@:2}"
    }

    cmakePackageDev()
    {
        installPackageDev "${1:-${_CMAKE_BUILD_PATH}}/install/" "${@:2}"
    }

    cmakePackageLib()
    {
        installPackageLib "${1:-${_CMAKE_BUILD_PATH}}/install/" "${@:2}"
    }

    cmakePackageTgt()
    {
        installPackageTgt "${1:-${_CMAKE_BUILD_PATH}}/install/" "${@:2}"
    }
